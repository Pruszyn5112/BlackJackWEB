@model BlackJackWEB.Models.Game

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>BlackJack Game</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" />
    <style>
        .playing-card {
            width: 100px;
            height: 140px;
            background: white;
            border-radius: 8px;
            margin: 5px;
            position: relative;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            display: inline-flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }

        .card-red { color: #D40000; }
        .card-black { color: #000000; }

        .card-corner {
            position: absolute;
            padding: 5px;
            font-size: 1.2em;
            font-weight: bold;
        }

        .top-left {
            top: 5px;
            left: 5px;
        }

        .bottom-right {
            bottom: 5px;
            right: 5px;
            transform: rotate(180deg);
        }

        .card-center {
            font-size: 2.5em;
        }

        .card-hidden {
            background: linear-gradient(45deg, #1a237e, #3f51b5);
            color: white;
        }

        .dealer-cards, .player-cards {
            background: #2d572c;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        }

        .balance-display {
            font-size: 1.5em;
            color: #28a745;
        }
    </style>
</head>
<body class="bg-light">
    <div class="container mt-4">
        <div class="text-center mb-4">
            <h1 class="display-4">BlackJack</h1>
            <div class="balance-display">
                Balance: $@Model.Player.Balance
            </div>
        </div>

        @if (TempData["Error"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                @TempData["Error"]
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        }
        @if (TempData["Winner"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                @TempData["Winner"]
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        }

        @if (Model.IsInitialState)
        {
            <div class="card p-4 mx-auto" style="max-width: 400px;">
                <form method="post" asp-action="StartGame">
                    <div class="mb-3">
                        <label for="betAmount" class="form-label">Place Your Bet</label>
                        <input type="number" name="betAmount" id="betAmount" 
                               class="form-control form-control-lg" 
                               required min="1" max="@Model.Player.Balance" />
                    </div>
                    <button type="submit" class="btn btn-primary btn-lg w-100">Deal Cards</button>
                </form>
            </div>
        }
        else
        {
            @functions {
            string GetSuitSymbol(string suit) => suit switch
            {
                "Hearts" => "♥",
                "Diamonds" => "♦",
                "Clubs" => "♣",
                "Spades" => "♠",
                _ => ""
            };

            string GetCardColor(string suit) =>
            suit is "Hearts" or "Diamonds" ? "card-red" : "card-black";
        }

            <div class="dealer-cards text-white">
                <h2>Dealer's Hand</h2>
                <div class="d-flex flex-wrap justify-content-center">
                    @{
                        var dealerCards = Model.Dealer.Hand.GetCards();
                    }
                    @if (Model.IsDealerTurn)
                    {
                        foreach (var card in dealerCards)
                        {
                            <div class="playing-card @GetCardColor(card.Suit)">
                                <div class="card-corner top-left">
                                    @card.Rank<br />@GetSuitSymbol(card.Suit)
                                </div>
                                <div class="card-center">
                                    @GetSuitSymbol(card.Suit)
                                </div>
                                <div class="card-corner bottom-right">
                                    @card.Rank<br />@GetSuitSymbol(card.Suit)
                                </div>
                            </div>
                        }
                        <div class="mt-2">
                            <span class="badge bg-light text-dark">
                                Dealer's Hand Value: @Model.Dealer.HandValue
                            </span>
                        </div>
                    }
                    else if (dealerCards.Any())
                    {
                        <div class="playing-card @GetCardColor(dealerCards[0].Suit)">
                            <div class="card-corner top-left">
                                @dealerCards[0].Rank<br />@GetSuitSymbol(dealerCards[0].Suit)
                            </div>
                            <div class="card-center">
                                @GetSuitSymbol(dealerCards[0].Suit)
                            </div>
                            <div class="card-corner bottom-right">
                                @dealerCards[0].Rank<br />@GetSuitSymbol(dealerCards[0].Suit)
                            </div>
                        </div>
                        <div class="playing-card card-hidden">
                            <span style="font-size: 2em;">🂠</span>
                        </div>
                    }
                </div>
            </div>

            <div class="player-cards text-white">
                <h2>Your Cards</h2>
                @for (int i = 0; i < Model.Player.Hands.Count; i++)
                {
                    <div class="mb-4">
                        @if (Model.Player.Hands.Count > 1)
                        {
                            <h3>Hand @(i + 1)</h3>
                        }
                        <div class="d-flex flex-wrap justify-content-center">
                            @foreach (var card in Model.Player.Hands[i].GetCards())
                            {
                                <div class="playing-card @GetCardColor(card.Suit)">
                                    <div class="card-corner top-left">
                                        @card.Rank<br/>@GetSuitSymbol(card.Suit)
                                    </div>
                                    <div class="card-center">
                                        @GetSuitSymbol(card.Suit)
                                    </div>
                                    <div class="card-corner bottom-right">
                                        @card.Rank<br/>@GetSuitSymbol(card.Suit)
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="mt-2">
                            <span class="badge bg-light text-dark">
                                Hand Value: @Model.Player.Hands[i].HandValue
                            </span>
                            @if (i == Model.Player.CurrentHandIndex)
                            {
                                <span class="badge bg-success">Active Hand</span>
                            }
                        </div>
                    </div>
                }
            </div>

            <div class="text-center mt-4">
                <div class="btn-group">
                    <form method="post" asp-action="Hit" class="d-inline">
                        <button type="submit" class="btn btn-primary">Hit</button>
                    </form>
                    <form method="post" asp-controller="Game" asp-action="Stand" class="d-inline">
                        <button type="submit" class="btn btn-secondary">Stand</button>
                    </form>
                    @if (Model.Player.CanDoubleDown())
                    {
                        <form method="post" asp-action="DoubleDown" class="d-inline">
                            <button type="submit" class="btn btn-warning">Double Down</button>
                        </form>
                    }
                    @if (Model.Player.CanSplit())
                    {
                        <form method="post" asp-action="Split" class="d-inline">
                            <button type="submit" class="btn btn-info">Split</button>
                        </form>
                    }
                </div>
                <div class="mt-3">
                    <form method="post" asp-action="Restart" class="d-inline">
                        <button type="submit" class="btn btn-danger">New Game</button>
                    </form>
                </div>
            </div>
        }
    </div>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>